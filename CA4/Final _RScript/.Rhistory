install_course_github('darrenredmond','R_ProgrammingDR')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- cls_list <- lapply(flags, class)
cls_list
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<- sapply(flags, class)
class(cls_vect
class(cls_vect)
class(cls_vect
class(cls_vect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colous)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_color,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes,range)
shape_mat<- sapply(flag_shapes,mean)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals(unique(flags))
unique_vals,_(unique(flags))
unique_vals<-(unique(flags))
unique_vals <- lapply(flags, unique)
unique_vals
length( unique_vals)
length(sapply(unqiue_vals))
length(sapply(unqiue_vals,lenght))
(sapply(unqiue_vals,lenght))
sapply(unqiue_vals,lenght))
skip()
sapply(unique(unqiue_vals, lenght))
unqiue(sapply(unique_vals, lenght))
sjip()
skip()
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass, and summary)
tapply(flags$population,flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
sample(1:100)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(1:100, c(0,1)replacement = 4, prob = c(0.3, 0.7))
skip()
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(1, size = 100, prob = 0.7)
flips2<-rbind(100,size =1,prob=0.7)
flips2<-rbinom(1, size =100, prob=0.7)
flips2<- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips,heads)
sum(flips,1)
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(100,25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,mean =10)
rpois( 5,mean = 10)
skip()
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
swirl()
# From inside of R Studio run the following 4 commands - these 16 exercises will be the marks for CA3
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','R_ProgrammingDR')
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.date("1969-01-01")
ds <- ("1960-01-01")
d2 <- as.Date("1969-01-01").
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as>POSIX1T(Sys.time())
t2 <- as>POSIX1T(Sys.time())
skip()
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays()
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<- "October 17,1986 08:24"
t3 <- ("October 17,1986 08:24")
skip()
strptime()
strptime()
?strptime
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x =  cars$dist y = cars$speed)
plot(x =  cars$dist, y = cars$speed)
plot(x =  Speed, y = cars$speed)
plot(x = "Speed", y = cars$speed)
skip()
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
skip()
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My PLot")
plot(cars, main = "My Plot")
plot(cars, submain = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle", col = 2)
plot(cars, col = 2)
plot(cars, xlim = c(10, 15) )
plot(cars, pch= 2)
mtcars()
intall mtcars
data(mtcars)
?boxplot
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
if(!require("swirl"))install.packages("swirl")
library(swirl)
install_course_github('darrenredmond','R_ProgrammingDR')
swirl()
Sys.Date()
mean(c(2,4,5))
# You're about to write your first function! Just like you would assign a value
# to a variable with the assignment operator, you assign functions in the following
# way:
#
# function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
# }
#
# The "variable name" you assign will become the name of your function. arg1 and
# arg2 represent the arguments of your function. You can manipulate the arguments
# you specify within the function. After sourcing the function, you can use the
# function by typing:
#
# function_name(value1, value2)
#
# Below we will create a function called boring_function. This function takes
# the argument `x` as input, and returns the value of x without modifying it.
# Delete the hash # sign in front of the x to make the function work! Be sure to
# save this script and type submit() in the console after you make your changes.
boring_function <- function(x) {
#x
}
submit()
+ }
boring_function <- function(x) {
x
}
submit()
> boring_function <- function(x) {x}
boring_function <- function(x) {x}
submit()
boring_function <- function(x) {
}
submit()
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
[Workspace loaded from ~/.RData]
> swirl()
Error: could not find function "swirl"
>
> if(!require("swirl"))install.packages("swirl")
Loading required package: swirl
| Hi! I see that you have some variables saved in your workspace. To keep things running smoothly, I recommend you clean up before
| starting swirl.
| Type ls() to see a list of the variables in your workspace. Then, type rm(list=ls()) to clear your workspace.
| Type swirl() when you are ready to begin.
Warning message:
package ‘swirl’ was built under R version 3.3.3
>
> library(swirl)
>
> install_course_github('darrenredmond','R_ProgrammingDR')
Downloading: 170 kB
>
> swirl()
| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself
| something unique.
What shall I call you?
| Please don't use any quotes or other punctuation in your name.
What shall I call you? michelle
| Please choose a course, or type 0 to exit swirl.
1: darrenredmond-R ProgrammingDR-7222c5d
2: R ProgrammingDR
3: Take me to the swirl course repository!
Selection: 2
| Please choose a lesson, or type 0 to return to course menu.
1: Simple                     2: Basic Building Blocks      3: Workspace and Files        4: Sequences of Numbers
5: Vectors                    6: Missing Values             7: Subsetting Vectors         8: Matrices and Data Frames
9: Logic                     10: Functions                 11: lapply and sapply         12: vapply and tapply
13: Looking at Data           14: Simulation                15: Dates and Times           16: Base Graphics
Selection: 10
|                                                                                                                             |   0%
| Functions are one of the fundamental building blocks of the R language. They are small pieces of reusable code that can be treated
| like any other R object.
...
|===                                                                                                                          |   2%
| If you've worked through any other part of this course, you've probably used some functions already. Functions are usually
| characterized by the name of the function followed by parentheses.
...
|=====                                                                                                                        |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function returns a string representing today's date. Type
| Sys.Date() below and see what happens.
> Sys.Date()
[1] "2017-04-26"
| You are doing so well!
|========                                                                                                                     |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value based on your computer's environment, while other
| functions manipulate input data in order to compute a return value.
...
|==========                                                                                                                   |   8%
| The mean() function takes a vector of numbers as input, and returns the average of all of the numbers in the input vector. Inputs to
| functions are often called arguments. Providing arguments to a function is also sometimes called passing arguments to that function.
| Arguments you want to pass to a function go inside the function's parentheses. Try passing the argument c(2, 4, 5) to the mean()
| function.
> mean(c(2,4,5))
[1] 3.666667
| You are amazing!
|=============                                                                                                                |  10%
| Functions usually take arguments which are variables that the function operates on. For example, the mean() function takes a vector
| as an argument, like in the case of mean(c(2,6,8)). The mean() function then adds up all of the numbers in the vector and divides
| that sum by the length of the vector.
...
|===============                                                                                                              |  12%
| In the following question you will be asked to modify a script that will appear as soon as you move on from this question. When you
| have finished modifying the script, save your changes to the script and type submit() and the script will be evaluated. There will
| be some comments in the script that opens up, so be sure to read them!
...
|==================                                                                                                           |  14%
| The last R expression to be evaluated in a function will become the return value of that function. We want this function to take one
| argument, x, and return x without modifying it. Delete the hash sign so that x is returned without any modification. Make sure to
| save your script before you type submit().
> # You're about to write your first function! Just like you would assign a value
> # to a variable with the assignment operator, you assign functions in the following
> # way:
> #
> # function_name <- function(arg1, arg2){
> #	# Manipulate arguments in some way
> #	# Return a value
> # }
> #
> # The "variable name" you assign will become the name of your function. arg1 and
> # arg2 represent the arguments of your function. You can manipulate the arguments
> # you specify within the function. After sourcing the function, you can use the
> # function by typing:
> #
> # function_name(value1, value2)
> #
> # Below we will create a function called boring_function. This function takes
> # the argument `x` as input, and returns the value of x without modifying it.
> # Delete the hash # sign in front of the x to make the function work! Be sure to
> # save this script and type submit() in the console after you make your changes.
>
> boring_function <- function(x) {
+     #x
+ }
> submit()
| Sourcing your script...
| Keep trying!
| Make sure to delete the hash sign so the last expression in the function is just x.
>         + }
Error: unexpected '}' in "        + }"
>
> boring_function <- function(x) {
+         x
+          }
> submit()
| Sourcing your script...
| One more time. You can do it!
| Make sure to delete the hash sign so the last expression in the function is just x.
> > boring_function <- function(x) {x}
Error: unexpected '>' in ">"
> boring_function <- function(x) {x}
> submit()
| Sourcing your script...
| That's not exactly what I'm looking for. Try again.
| Make sure to delete the hash sign so the last expression in the function is just x.
> boring_function <- function(x)
> submit()
boring_function <- function(x)
submit()
skip()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
c(2,3,4)
}
submit()
sum(2,3,5)
lenght(2,3,5)
length(2,3,5)
Lenght(my_mean)
skip()
my_mean(c(4,4,10))
my_mean(c(4, 5, 10))
remainder <- function(num, divisor) {
1,2,3
}
skip()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
}
submit()
evaluate <- function(func, dat){
remainder }
> submit()
skip()
evaluate(c(1.4,3.6,7.9))
skip()
evaluate(function(x){x+1}, 6)
evaluate(x)
evaluate(x,c(8,4,0))
evaluate(x,(8, 4, 0))
evaluate(c,x)
skip()
evaluate(function(x){x[1]}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is","not", "fun!")
("Programming", "is", "fun!")
("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
paste("Hello", "My", "name", "is", "Michelle")
submit()
paste("Hello", "My", "name", "is", "Michelle") submit()
skip()
telegram("programming is not fun tonight")
submit()
mad_libs <- function(...){
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
sumit()
submit()
skip90
skip90
SKIP()
SJ
SKIP()
skip()
skip()
# The syntax for creating new binary operators in R is unlike anything else in
# R, but it allows you to define a new syntax for your function. I would only
# recommend making your own binary operator if you plan on using it often!
#
# User-defined binary operators have the following syntax:
#      %[whatever]%
# where [whatever] represents any valid variable name.
#
# Let's say I wanted to define a binary operator that multiplied two numbers and
# then added one to the product. An implementation of that operator is below:
#
# "%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
#   left * right + 1
# }
#
# I could then use this binary operator like `4 %mult_add_one% 5` which would
# evaluate to 21.
#
# Write your own binary operator below from absolute scratch! Your binary
# operator must be called %p% so that the expression:
#
#       "Good" %p% "job!"
#
# will evaluate to: "Good job!"
"%p%" <- function(){ # Remember to add arguments!
}
submit()
'Hello' %p% '10032026!'
skip()
View(`%p%`)
"%p%" <- function(left, right){ "# Remember to add arguments!"I love R""
paste(left, right)
akip()
skip()
ibrary(gdata)                   # load gdata package help(read.xls)                   # documentation
> mydata = read.xls("v4Michelle_10032026_writetocsv.csv")  # read from first sheet
load(gdata)
install.packages("g.data")
ibrary(gdata)                   # load gdata package
> help(read.xls)                   # documentation
> mydata = read.xls("v4Michelle_10032026_writetocsv.csv")  # read from first sheet
ibrary(gdata)                   # load gdata package  help(read.xls)                   # documentation
> mydata = read.xls("v4Michelle_10032026_writetocsv.csv")  # read from first sheet
help(g.data)
?g.data
libary(gdata)
library(gdata)
?`gdata-package`
mydata= read.csv("v4Michelle_10032026_writetocsv")
setdir(C:\Users\carrm\Desktop\programming_for_big_data_MC10032026\CA4\Final versions python code)
setwd("C:\Users\carrm\Desktop\programming_for_big_data_MC10032026\CA4\Final versions python code")
mydata= read.csv(v4Michelle_10032026_writetocsv)
mydata= read.csv("v4Michelle_10032026_writetocsv")
dat = read.csv("v4Michelle_10032026_writetocsv.csv", header = TRUE)
setdir("C:\Users\carrm\Desktop\programming_for_big_data_MC10032026\CA4\Final versions python code")
setdir("C:\\Users\\carrm\\Desktop\\programming_for_big_data_MC10032026\\CA4\\Final versions python code")
getwd()
setwd("C:\\Users\\carrm\\Desktop\\programming_for_big_data_MC10032026\\CA4\\Final versions python code")
dat = read.csv("v4Michelle_10032026_writetocsv.csv", header = TRUE)
libary(gplots)
install.packages("gplots")
hist(dat)
sapply(dat, mean, na.rm=TRUE)
summary(dat)
install.packages("Hmisc")
library(Hmisc)
describe(mydata)
# n, nmiss, unique, mean, 5,10,25,50,75,90,95th percentiles
# 5 lowest and 5 highest scores
describe(dat)
install.packages("pastecs")
library(pastecs)
stat.desc(dat)
# nbr.val, nbr.null, nbr.na, min max, range, sum,
# median, mean, SE.mean, CI.mean, var, std.dev, coef.var
stat_density(dat)
install.packages("psych")
library(psych)
describe(dat)
# item name ,item number, nvalid, mean, sd,
# median, mad, min, max, skew, kurtosis, se
library(psych)
describe.by(dat, group,...)
library(psych)
describe(dat, group,...)
